// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * xiv-craftsmanship-api
 *
 * xiv-craftsmanship-api
 *
 * API version: 1.0.0
 * Contact: hazuki3417@gmail.com
 */

package openapi

import (
	"net/http"
	"strings"
)

// DevelopAPIController binds http requests to an api service and writes the service results to the http response
type DevelopAPIController struct {
	service DevelopAPIServicer
	errorHandler ErrorHandler
}

// DevelopAPIOption for how the controller is set up.
type DevelopAPIOption func(*DevelopAPIController)

// WithDevelopAPIErrorHandler inject ErrorHandler into controller
func WithDevelopAPIErrorHandler(h ErrorHandler) DevelopAPIOption {
	return func(c *DevelopAPIController) {
		c.errorHandler = h
	}
}

// NewDevelopAPIController creates a default api controller
func NewDevelopAPIController(s DevelopAPIServicer, opts ...DevelopAPIOption) *DevelopAPIController {
	controller := &DevelopAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DevelopAPIController
func (c *DevelopAPIController) Routes() Routes {
	return Routes{
		"GetHealth": Route{
			strings.ToUpper("Get"),
			"/health",
			c.GetHealth,
		},
		"GetOpenapi": Route{
			strings.ToUpper("Get"),
			"/openapi",
			c.GetOpenapi,
		},
	}
}

// GetHealth - health
func (c *DevelopAPIController) GetHealth(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetHealth(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOpenapi - openapi
func (c *DevelopAPIController) GetOpenapi(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetOpenapi(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
