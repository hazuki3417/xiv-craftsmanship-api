// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * xiv-craftsmanship-api
 *
 * xiv-craftsmanship-api
 *
 * API version: 1.0.0
 * Contact: hazuki3417@gmail.com
 */

package openapi

import (
	"errors"
	"io"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RecipeAPIController binds http requests to an api service and writes the service results to the http response
type RecipeAPIController struct {
	service RecipeAPIServicer
	errorHandler ErrorHandler
}

// RecipeAPIOption for how the controller is set up.
type RecipeAPIOption func(*RecipeAPIController)

// WithRecipeAPIErrorHandler inject ErrorHandler into controller
func WithRecipeAPIErrorHandler(h ErrorHandler) RecipeAPIOption {
	return func(c *RecipeAPIController) {
		c.errorHandler = h
	}
}

// NewRecipeAPIController creates a default api controller
func NewRecipeAPIController(s RecipeAPIServicer, opts ...RecipeAPIOption) *RecipeAPIController {
	controller := &RecipeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RecipeAPIController
func (c *RecipeAPIController) Routes() Routes {
	return Routes{
		"GetRecipe": Route{
			strings.ToUpper("Get"),
			"/recipe/{recipeId}",
			c.GetRecipe,
		},
	}
}

// GetRecipe - recipe
func (c *RecipeAPIController) GetRecipe(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recipeIdParam := params["recipeId"]
	if recipeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recipeId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetRecipe(r.Context(), recipeIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
