// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * xiv-craftsmanship-api
 *
 * xiv-craftsmanship-api
 *
 * API version: 1.0.0
 * Contact: hazuki3417@gmail.com
 */

package openapi


import (
	"errors"
)



type Material struct {

	ItemId string `json:"itemId" validate:"regexp=^[0-9a-z]{11}"`

	Quantity int32 `json:"quantity"`

	Type ItemType `json:"type"`

	Recipes []Recipe `json:"recipes"`
}

// AssertMaterialRequired checks if the required fields are not zero-ed
func AssertMaterialRequired(obj Material) error {
	elements := map[string]interface{}{
		"itemId": obj.ItemId,
		"quantity": obj.Quantity,
		"type": obj.Type,
		"recipes": obj.Recipes,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Recipes {
		if err := AssertRecipeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMaterialConstraints checks if the values respects the defined constraints
func AssertMaterialConstraints(obj Material) error {
	if obj.Quantity < 1 {
		return &ParsingError{Param: "Quantity", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Quantity > 999 {
		return &ParsingError{Param: "Quantity", Err: errors.New(errMsgMaxValueConstraint)}
	}
	for _, el := range obj.Recipes {
		if err := AssertRecipeConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
