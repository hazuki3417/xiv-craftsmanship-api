// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * xiv-craftsmanship-api
 *
 * xiv-craftsmanship-api
 *
 * API version: 1.0.0
 * Contact: hazuki3417@gmail.com
 */

package openapi


import (
	"errors"
)



type Craft struct {

	RecipeId string `json:"recipeId" validate:"regexp=^[0-9a-z]{11}"`

	ItemId string `json:"itemId" validate:"regexp=^[0-9a-z]{11}"`

	Name string `json:"name"`

	Pieces int32 `json:"pieces"`

	Job string `json:"job"`

	ItemLevel int32 `json:"itemLevel"`

	CraftLevel *int32 `json:"craftLevel"`
}

// AssertCraftRequired checks if the required fields are not zero-ed
func AssertCraftRequired(obj Craft) error {
	elements := map[string]interface{}{
		"recipeId": obj.RecipeId,
		"itemId": obj.ItemId,
		"name": obj.Name,
		"pieces": obj.Pieces,
		"job": obj.Job,
		"itemLevel": obj.ItemLevel,
		"craftLevel": obj.CraftLevel,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCraftConstraints checks if the values respects the defined constraints
func AssertCraftConstraints(obj Craft) error {
	if obj.Pieces < 1 {
		return &ParsingError{Param: "Pieces", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Pieces > 999 {
		return &ParsingError{Param: "Pieces", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.ItemLevel < 1 {
		return &ParsingError{Param: "ItemLevel", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ItemLevel > 999 {
		return &ParsingError{Param: "ItemLevel", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.CraftLevel != nil && *obj.CraftLevel < 1 {
		return &ParsingError{Param: "CraftLevel", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.CraftLevel != nil && *obj.CraftLevel > 999 {
		return &ParsingError{Param: "CraftLevel", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
