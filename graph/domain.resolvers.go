package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/hazuki3417/xiv-craftsmanship-api/graph/model"
)

// Crafts is the resolver for the crafts field.
func (r *queryResolver) Crafts(ctx context.Context, name string) ([]*model.Craft, error) {
	crafts, err := r.domain.Domain.UseCase.GetCrafts(name)

	if err != nil {
		return nil, err
	}

	var result []*model.Craft
	for _, craft := range crafts {
		result = append(result, &model.Craft{
			ID:   craft.ID,
			Name: craft.Name,
		})
	}
	return result, nil
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id string) (*model.RecipeTree, error) {
	recipe, err := r.domain.Domain.UseCase.GetRecipe(id)

	if err != nil {
		return nil, err
	}

	nodes := []*model.Node{}
	for _, node := range recipe.Nodes {
		nodes = append(nodes, &model.Node{
			ID:    node.ID,
			Name:  node.Name,
			Unit:  node.Unit,
			Total: node.Total,
			Depth: &model.Depth{
				X: node.X,
				Y: node.Y,
			},
			NodeType: node.NodeType,
		})
	}

	edges := []*model.Edge{}
	for _, edge := range recipe.Edges {
		edges = append(edges, &model.Edge{
			Source: edge.Source,
			Target: edge.Target,
		})
	}

	return &model.RecipeTree{
		Nodes: nodes,
		Edges: edges,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
